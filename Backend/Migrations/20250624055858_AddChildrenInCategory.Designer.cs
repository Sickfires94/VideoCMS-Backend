// <auto-generated />
using System;
using Backend.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(VideoManagementApplicationContext))]
    [Migration("20250624055858_AddChildrenInCategory")]
    partial class AddChildrenInCategory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.DTOs.Category", b =>
                {
                    b.Property<int>("categoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("categoryId"));

                    b.Property<string>("categoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("categoryParentId")
                        .HasColumnType("int");

                    b.HasKey("categoryId");

                    b.HasIndex("categoryParentId");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("Backend.DTOs.Tag", b =>
                {
                    b.Property<int>("tagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("tagId"));

                    b.Property<string>("tagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("tagId");

                    b.ToTable("tags");
                });

            modelBuilder.Entity("Backend.DTOs.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userId"));

                    b.Property<DateTime>("userCreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("userEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("userUpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.HasKey("userId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Backend.DTOs.VideoMetadata", b =>
                {
                    b.Property<int>("videoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("videoId"));

                    b.Property<int?>("categoryId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<string>("videoDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("videoName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("videoUpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getDate()");

                    b.Property<DateTime>("videoUploadDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("videoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("videoId");

                    b.HasIndex("categoryId");

                    b.HasIndex("userId");

                    b.ToTable("videoMetadatas");
                });

            modelBuilder.Entity("TagVideoMetadata", b =>
                {
                    b.Property<int>("VideoMetadatavideoId")
                        .HasColumnType("int");

                    b.Property<int>("videoTagstagId")
                        .HasColumnType("int");

                    b.HasKey("VideoMetadatavideoId", "videoTagstagId");

                    b.HasIndex("videoTagstagId");

                    b.ToTable("TagVideoMetadata");
                });

            modelBuilder.Entity("Backend.DTOs.Category", b =>
                {
                    b.HasOne("Backend.DTOs.Category", "categoryParent")
                        .WithMany("children")
                        .HasForeignKey("categoryParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("categoryParent");
                });

            modelBuilder.Entity("Backend.DTOs.VideoMetadata", b =>
                {
                    b.HasOne("Backend.DTOs.Category", "category")
                        .WithMany()
                        .HasForeignKey("categoryId");

                    b.HasOne("Backend.DTOs.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");

                    b.Navigation("user");
                });

            modelBuilder.Entity("TagVideoMetadata", b =>
                {
                    b.HasOne("Backend.DTOs.VideoMetadata", null)
                        .WithMany()
                        .HasForeignKey("VideoMetadatavideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.DTOs.Tag", null)
                        .WithMany()
                        .HasForeignKey("videoTagstagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.DTOs.Category", b =>
                {
                    b.Navigation("children");
                });
#pragma warning restore 612, 618
        }
    }
}
